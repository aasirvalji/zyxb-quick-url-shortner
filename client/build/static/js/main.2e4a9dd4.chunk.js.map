{"version":3,"sources":["components/Heading/Heading.js","App.js","serviceWorker.js","index.js"],"names":["Heading","class","id","href","target","rel","App","useState","urlInput","setUrlInput","shortUrls","setShortUrls","longUrls","setLongUrls","clearFields","copyToClipboard","text","window","clipboardData","setData","document","queryCommandSupported","textarea","createElement","textContent","style","position","body","appendChild","select","execCommand","ex","console","warn","removeChild","exact","path","className","value","onChange","e","Button","variant","onClick","match","axios","post","url","then","res","length","su","slice","lu","log","state","data","shortUrl","longUrl","alert","startIcon","backgroundColor","color","undefined","Divider","map","index","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gTAoBeA,G,MAjBC,WACd,OACE,6BACE,yBAAKC,MAAM,qBACT,yBAAKC,GAAG,oBAAoBD,MAAM,mBAChC,yBAAKC,GAAG,SAASD,MAAM,QACrB,oCACA,uBAAGE,KAAK,4BAA4BC,OAAO,SAASC,IAAI,uBACxD,uBAAGJ,MAAM,cAAcC,GAAG,uB,mEC+KvBI,MA7Kf,WAAgB,IAAD,EACmBC,mBAAS,MAD5B,mBACNC,EADM,KACIC,EADJ,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGmBJ,mBAAS,IAH5B,mBAGNK,EAHM,KAGIC,EAHJ,KAsCPC,EAAc,WAClBL,EAAY,KAGd,SAASM,EAAgBC,GACvB,GAAIC,OAAOC,eAAiBD,OAAOC,cAAcC,QAE7C,OAAOF,OAAOC,cAAcC,QAAQ,OAAQH,GAG3C,GAAII,SAASC,uBAAyBD,SAASC,sBAAsB,QAAS,CAC/E,IAAIC,EAAWF,SAASG,cAAc,YACtCD,EAASE,YAAcR,EACvBM,EAASG,MAAMC,SAAW,QAC1BN,SAASO,KAAKC,YAAYN,GAC1BA,EAASO,SACT,IACI,OAAOT,SAASU,YAAY,QAEhC,MAAOC,GAEH,OADAC,QAAQC,KAAK,4BAA6BF,IACnC,EALX,QAQIX,SAASO,KAAKO,YAAYZ,KAKpC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,MACA,yBAAKC,UAAU,kBACf,yBAAKA,UAAU,mBACb,2BACEnC,GAAG,YACHoC,MAAO9B,EACP+B,SAAU,SAACC,GAAD,OAAO/B,EAAY+B,EAAEpC,OAAOkC,UAExC,kBAACG,EAAA,EAAD,CACEC,QAAQ,YACRC,QAAS,WA3EfnC,EAEAA,EAASoC,MACP,oNAGFC,IAAMC,KAAK,mBAAoB,CAAEC,IAAKvC,IAAYwC,MAAK,SAACC,GACtD,GAAIvC,EAAUwC,OAAS,EAAG,CACxB,IAAIC,EAAE,YAAOzC,GACbyC,EAAKA,EAAGC,MAAM,EAAG,GACjBzC,EAAawC,GAEf,GAAIvC,EAASsC,OAAS,EACtB,CACE,IAAIG,EAAE,YAAOzC,GACbyC,EAAKA,EAAGD,MAAM,EAAG,GACjBvC,EAAYwC,GAEdrB,QAAQsB,IAAI5C,EAAWE,GACvBD,GAAa,SAAA4C,GAAK,OAAKN,EAAIO,KAAKC,UAAd,mBAA2BF,OAC7C1C,GAAY,SAAA0C,GAAK,OAAKN,EAAIO,KAAKE,SAAd,mBAA0BH,UAG7CzC,KAEA6C,MAAM,+BAGRA,MAAM,kCAgDEC,UAAW,kBAAC,IAAD,MACXnC,MAAO,CAACoC,gBAAiB,UAAWC,MAAO,SAC3CzB,UAAU,SACVnC,GAAG,cANL,iBAYF,yBAAKmC,UAAU,0BACf,kBAACI,EAAA,EAAD,CACIC,QAAQ,YACRC,QAAS,kBAAM7B,KACf8C,UAAW,kBAAC,IAAD,MACXnC,MAAO,CAACoC,gBAAiB,UAAWC,MAAO,SAC3C5D,GAAG,gBALP,iBAUA,yBAAKmC,UAAU,2BACI0B,IAAdrD,GAA+C,GAApBA,EAAUwC,SACxC,oCACA,yBAAKb,UAAU,kBACf,yBAAKA,UAAU,4BACf,yCACa,2BAAI3B,EAAU,KAE3B,kBAAC+B,EAAA,EAAD,CACEC,QAAQ,YACRkB,UAAW,kBAAC,IAAD,MACXvB,UAAU,SACVZ,MAAO,CAACoC,gBAAiB,UAAWC,MAAO,SAC3CnB,QAAS,kBAAM5B,EAAgBL,EAAU,KACzCR,GAAG,aANL,SAUA,yBAAKmC,UAAU,iBAAiBnC,GAAIU,EAASsC,OAAS,GAAK,oBAC3D,wCACY,2BAAItC,EAAS,MAIvBF,EAAUwC,OAAS,GAAKtC,EAASsC,OAAS,GAAM,kBAACc,EAAA,EAAD,CAASvC,MAAO,CAACoC,gBAAiB,SAAUxB,UAAU,aAGxG,yBAAKA,UAAU,gCACE0B,IAAdrD,GAA2BA,EAAUwC,OAAS,IACjD,6BACCxC,EAAUuD,KAAI,SAACR,EAAUS,GAAX,OACb,oCACCA,EAAQ,GACP,yBAAK7B,UAAU,kBACnB,yBAAKA,UAAU,4BACf,yCACa,2BAAIoB,IAEjB,kBAAChB,EAAA,EAAD,CACEC,QAAQ,YACRL,UAAU,SACVZ,MAAO,CAACoC,gBAAiB,UAAWC,MAAO,SAC3CF,UAAW,kBAAC,IAAD,MACX1D,GAAG,YACHyC,QAAS,kBAAM5B,EAAgB0C,KANjC,SAWA,yBAAKpB,UAAU,iBAAiBnC,GAAIgE,IAAUxD,EAAUwC,OAAS,EAAI,kBAAoB,IACzF,wCACY,2BAAItC,EAASsD,MAGvBA,EAAQxD,EAAUwC,OAAS,GAAM,kBAACc,EAAA,EAAD,CAASvC,MAAO,CAACoC,gBAAiB,SAAUxB,UAAU,yBC7JjF8B,QACW,cAA7BlD,OAAOmD,SAASC,UAEe,UAA7BpD,OAAOmD,SAASC,UAEhBpD,OAAOmD,SAASC,SAASzB,MACvB,2DCZN0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpD,SAASqD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.2e4a9dd4.chunk.js","sourcesContent":["import React from 'react';\nimport './Heading.css';\n\nconst Heading = () => {\n  return (\n    <div>\n      <div class=\"heading-container\">\n        <div id=\"heading-content-1\" class=\"heading-content\">\n          <div id=\"icon-1\" class=\"icon\">\n            <h2>zyxb</h2>\n            <a href='http://www.aasirvalji.com' target=\"_blank\" rel=\"noopener noreferrer\">\n            <i class=\"far fa-user\" id='person-icon'></i>\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Heading;\n","import React, { useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Heading from './components/Heading/Heading';\n\nimport Button from '@material-ui/core/Button';\nimport CropFreeIcon from '@material-ui/icons/CropFree';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport Divider from '@material-ui/core/Divider';\n\nfunction App() {\n  const [urlInput, setUrlInput] = useState(null);\n  const [shortUrls, setShortUrls] = useState([]);\n  const [longUrls, setLongUrls] = useState([]);\n\n  const createShortUrl = () => {\n    if (urlInput) {\n      if (\n        urlInput.match(\n          /https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,}/\n        )\n      ) {\n        axios.post('/api/url/shorten', { url: urlInput }).then((res) => {\n          if (shortUrls.length > 4) {\n            let su = [...shortUrls]\n            su = su.slice(0, 4)\n            setShortUrls(su)\n          }\n          if (longUrls.length > 4) \n          {\n            let lu = [...longUrls]\n            lu = lu.slice(0, 4)\n            setLongUrls(lu)\n          }\n          console.log(shortUrls, longUrls)\n          setShortUrls(state => [res.data.shortUrl, ...state]);\n          setLongUrls(state => [res.data.longUrl, ...state]);\n        });\n\n        clearFields()\n      } else {\n        alert('Sorry, thats an invalid url');\n      }\n    } else {\n      alert('Empty input, please add a url');\n    }\n  };\n\n  const clearFields = () => {\n    setUrlInput('');\n  };\n\n  function copyToClipboard(text) {\n    if (window.clipboardData && window.clipboardData.setData) {\n        // Internet Explorer-specific code path to prevent textarea being shown while dialog is visible.\n        return window.clipboardData.setData(\"Text\", text);\n\n    }\n    else if (document.queryCommandSupported && document.queryCommandSupported(\"copy\")) {\n        var textarea = document.createElement(\"textarea\");\n        textarea.textContent = text;\n        textarea.style.position = \"fixed\";  // Prevent scrolling to bottom of page in Microsoft Edge.\n        document.body.appendChild(textarea);\n        textarea.select();\n        try {\n            return document.execCommand(\"copy\");  // Security exception may be thrown by some browsers.\n        }\n        catch (ex) {\n            console.warn(\"Copy to clipboard failed.\", ex);\n            return false;\n        }\n        finally {\n            document.body.removeChild(textarea);\n        }\n    }\n}\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Heading></Heading>\n          <div className='main-container'>\n          <div className=\"input-container\">\n            <input\n              id=\"url-input\"\n              value={urlInput}\n              onChange={(e) => setUrlInput(e.target.value)}\n            />\n            <Button\n              variant=\"contained\"\n              onClick={() => createShortUrl()}\n              startIcon={<CropFreeIcon />}\n              style={{backgroundColor: '#1B36E1', color: 'white'}}\n              className='ui-btn'\n              id=\"submit-url\"\n            >\n              Generate Url\n            </Button>\n          </div>\n\n          <div className=\"clear-fields-container\">\n          <Button\n              variant=\"contained\"\n              onClick={() => clearFields()} \n              startIcon={<HighlightOffIcon />}\n              style={{backgroundColor: '#1B36E1', color: 'white'}}\n              id=\"clear-fields\">\n              Clear Entry\n            </Button>\n          </div>\n          </div>\n          <div className=\"result-container\">\n            {!(shortUrls === undefined || shortUrls.length == 0) && \n            <>\n            <div className='result-content'>\n            <div className='first-short-url-and-copy'>\n            <p>\n              Short Url: <b>{shortUrls[0]}</b>\n            </p>\n            <Button\n              variant=\"contained\"\n              startIcon={<AssignmentIcon />}\n              className='ui-btn'\n              style={{backgroundColor: '#1B36E1', color: 'white'}}\n              onClick={() => copyToClipboard(shortUrls[0])}\n              id=\"clipboard\">\n              Copy\n            </Button>\n            </div>\n            <div className='long-short-url' id={longUrls.length < 2 && 'first-recent-url'}>\n            <p>\n              Long Url: <b>{longUrls[0]}</b>\n              {/* longurl length: {longUrls.length} */}\n            </p>\n            </div>\n            {(shortUrls.length > 1 && longUrls.length > 1) && <Divider style={{backgroundColor: 'white'}} className='divider'/>}\n            </div>\n\n            <div className='recent-urls-container'>\n            {!(shortUrls === undefined || shortUrls.length < 2) && \n            <div>\n            {shortUrls.map((shortUrl, index) => (\n              <>\n              {index > 0 && \n                <div className='result-content'>\n            <div className='first-short-url-and-copy'>\n            <p>\n              Short Url: <b>{shortUrl}</b>\n            </p>\n            <Button\n              variant=\"contained\"\n              className='ui-btn'\n              style={{backgroundColor: '#1B36E1', color: 'white'}}\n              startIcon={<AssignmentIcon />}\n              id=\"clipboard\"\n              onClick={() => copyToClipboard(shortUrl)}\n              >\n              Copy\n            </Button>\n            </div>\n            <div className='long-short-url' id={index === shortUrls.length - 1 ? 'last-recent-url' : ''}>\n            <p>\n              Long Url: <b>{longUrls[index]}</b>\n            </p>\n            </div>\n            {(index < shortUrls.length - 1) && <Divider style={{backgroundColor: 'white'}} className='divider'/>}\n            </div>\n              }\n              </>\n            ))}\n            </div>\n            }\n            </div>\n            </>\n            }\n          </div>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}